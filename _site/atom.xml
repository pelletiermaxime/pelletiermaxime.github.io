<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Maxime Pelletier</title>
 <link href="http://pelletiermaxime.info/atom.xml" rel="self"/>
 <link href="http://pelletiermaxime.info/"/>
 <updated>2014-10-13T23:10:53-04:00</updated>
 <id>http://pelletiermaxime.info/</id>
 <author>
   <name>Maxime Pelletier</name>
   <email>pelletiermaxime.info</email>
 </author>

 
 <entry>
   <title>What I don't like about web programming</title>
   <link href="http://pelletiermaxime.info/2011/12/10/Dislike-About_web.html"/>
   <updated>2011-12-10T00:00:00-05:00</updated>
   <id>http://pelletiermaxime.info/2011/12/10/Dislike-About_web</id>
   <content type="html">&lt;h1 id=&quot;what-i-dont-like-about-web-programming&quot;&gt;What I don’t like about web programming&lt;/h1&gt;

&lt;p&gt;I have been doing web programming as my job for the past 6 years now. The problem is that for the first 5 I was working on my own php website built from scratch, with my own very simple framework. My new job forced me to work in different technologies like Magento, Alfresco, Typo3, Symfony, Wordpress and mostly on Koha, a perl Library management system. Working with all those very different technologies and very different way of thinking to ultimately output html code made me think about what I like about web programming and what I really don’t like. I ranted about it on identi.ca yesterday, but you know how hard it is to really say anything in 140 characters. Here are a few toughts.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;I like programming. Sure that may seem obvious, but sometimes I feel like frameworks are written to do so much stuff automagically that what you end up doing isn’t writting code, it’s finding how to do something in the documentation and then configuring the system to do it. Symfony is a good exemple of that problem imo. You can generate so much code that when you have to do something the developpers didn’t think about, you are completly lost trying to write it because at this point it almost doesn’t look like good old php.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ORM. I read a few blog posts and comments on the issue of should you use something that maps all your database around objects so that you don’t have to learn SQL and instead use native code to query your data. I am on the side of the ORM haters. My argument against using an ORM is basically that none is perfect. I haven’t yet encountered a system where you could do every single query you wanted to do without having to break out of the ORM and manually write a query. Worst, some even implement their own query language (DQL…), making it something more you have to learn instead of using SQL, something that every programmer knows pretty well. A side effect of using ORMs is also that they always end up doing way more queries than you would if you only wrote what you needed. Both typo3 and symfony often do hundreds of queries just to show the main page of the website. Instead of optimizing the code, people end up using memcached basically as a query buffer to have website that load in less than 5 seconds.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Incredibly complicated OO code. To explain this I will take an exemple of the exact opposite : Wordpress. What I really like about wordpress is that you can open up the index.php, read the code from line to line until you end up on the footer. It’s just simple and that makes it very easy to install, use, learn and very fast because it often only needs to read a few files to generate a page. Sure, you do lose a lot of the power of object oriented programming, but there are hooks for everything that makes wordpress very powerful as you can see from the number of plugins for it. I like to read the code of frameworks or CMS I have to use, so I did the same when I started working with Magento. It didn’t take long that I just stopped reading before my brain exploded. A class that extends another that extend another, etc, for dozens of layers of code that can be redefined anywhere. What I ended up doing most of the time is just looking at the html code I had to modify and than searching for it in the thousands of php files to find it because it’s so huge that you just can’t guess where anything could be. I tried looking at the xdebug output or a page request form Magento and I tought KCachegrind would crash from having so many function calls.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I hate how complicated it is to do a website these days. For some reason it seems that every page needs 6000 lines of css, hundred images and 30 javascript files because everything needs to have round corners, gradients, transparency, widgets and animations. Of course you need to do it in html5, don’t use tables, don’t put javascript or css inline, make it work in a dozen of browsers and of course you need to have fallbacks for those that don’t enable javascript or css or images or can’t use a mouse or even zoom at 200% on your page. It’s just ridiculous. Looks at this blog. Is it the best looking blog on earth ? It sure is not. What it is is fast, simple and as easy as it can be to access the content. I have having to skip intros, stop animations, pause videos and download many megs of code just to have the menu of a restaurant (and it’s always in a 10 megs pdf). Content is what matters and on most websites I feel like it’s the last priority. What should be the priority is getting to the information you want as fast as possible.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do you disagree with anything I said? Feel free to post what you like and don’t like in the comments below.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Stats plugin for laconica version 0.3</title>
   <link href="http://pelletiermaxime.info/2009/06/24/Laconica-Stats-Plugin-3.html"/>
   <updated>2009-06-24T00:00:00-04:00</updated>
   <id>http://pelletiermaxime.info/2009/06/24/Laconica-Stats-Plugin-3</id>
   <content type="html">&lt;h1 id=&quot;stats-plugin-for-laconica-version-03&quot;&gt;Stats plugin for laconica version 0.3&lt;/h1&gt;

&lt;p&gt;This version adds top users, top followed, top following, top source and general stats on the info bar on the right.&lt;/p&gt;

&lt;p&gt;You can see an example of the global stats on &lt;a href=&quot;http://symphoni.ca/stats&quot;&gt;Symphoni.ca&lt;/a&gt; and an example of the stats 
for a user &lt;a href=&quot;http://symphoni.ca/pmax/user_stats&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can get the code at &lt;a href=&quot;http://symphoni.ca/plugin/StatsPlugin03.txt&quot;&gt;http://symphoni.ca/plugin/StatsPlugin03.txt&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;http://pelletiermaxime.info/2009/05/04/Laconica-Stats-Plugin.html&quot;&gt;my first post about the plugin&lt;/a&gt; for more 
informations.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Stats plugin for laconica version 0.2</title>
   <link href="http://pelletiermaxime.info/2009/06/16/Laconica-Stats-Plugin-2.html"/>
   <updated>2009-06-16T00:00:00-04:00</updated>
   <id>http://pelletiermaxime.info/2009/06/16/Laconica-Stats-Plugin-2</id>
   <content type="html">&lt;h1 id=&quot;stats-plugin-for-laconica-version-02&quot;&gt;Stats plugin for laconica version 0.2&lt;/h1&gt;

&lt;p&gt;Someone (Gaurav Wasan) asked in the comments of my first blog post about this plugin if it was possible to modify it to show 
stats for a specific user. Took me a while, but i’m now posting to say I did it and I updated the sources.&lt;/p&gt;

&lt;p&gt;You can get the code at &lt;a href=&quot;http://symphoni.ca/plugin/StatsPlugin.txt&quot;&gt;http://symphoni.ca/plugin/StatsPlugin.txt&lt;/a&gt;. It 
basically adds a “stats” tab to the public navigation menu and to the personal navigation menu and 
then uses the google chart api and a few sql queries to display the global stats for each day of the week and to display the 
same stats for an user.&lt;/p&gt;

&lt;p&gt;If it’s not working for you, try adding the line&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Event::handle(&#39;EndPersonalGroupNav&#39;, array($this));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;at the end of /lib/personalgroupnav.php (right before “$this-&amp;gt;out-&amp;gt;elementEnd(‘ul’);”).&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Stats plugin for laconica</title>
   <link href="http://pelletiermaxime.info/2009/05/04/Laconica-Stats-Plugin.html"/>
   <updated>2009-05-04T00:00:00-04:00</updated>
   <id>http://pelletiermaxime.info/2009/05/04/Laconica-Stats-Plugin</id>
   <content type="html">&lt;h1 id=&quot;stats-plugin-for-laconica&quot;&gt;Stats plugin for laconica&lt;/h1&gt;

&lt;p&gt;I installed laconica on my localhost the day it was opened to the public, but I never wrote any code for it for many reasons 
(but I won’t go into this). When I saw that the latest laconica had support for plugins and hooks to help create them, I 
started to look at how to do something cool for my laconica server at &lt;a href=&quot;http://symphoni.ca&quot;&gt;symphoni.ca&lt;/a&gt;. I came 
across &lt;a href=&quot;http://www.macno.org/denticator.php&quot;&gt;denticator&lt;/a&gt; and had the idea to do a (very) simple plugin to show some 
stats for my instance.&lt;/p&gt;

&lt;p&gt;You can get the code at &lt;a href=&quot;http://symphoni.ca/plugin/StatsPlugin.txt&quot;&gt;http://symphoni.ca/plugin/StatsPlugin.txt&lt;/a&gt;. It 
basically adds a “stats” tab to the public navigation menu and then uses the google chart api and a sql query to display the global stats for each day of the week. I hope it can 
help to ceate (better) plugins for laconica.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Installing laconi.ca on nginx</title>
   <link href="http://pelletiermaxime.info/2009/04/11/Laconica-On-Nginx.html"/>
   <updated>2009-04-11T00:00:00-04:00</updated>
   <id>http://pelletiermaxime.info/2009/04/11/Laconica-On-Nginx</id>
   <content type="html">&lt;h1 id=&quot;installing-laconica-on-nginx&quot;&gt;Installing laconi.ca on nginx&lt;/h1&gt;

&lt;p&gt;A few weeks ago I wanted to install Laconi.ca and start my own microblogging instance. Of course by now you know that I use and 
really like nginx, so I looked for instructions on how to install it on this http server. All I found was tutorials for apache 
and nginx wasn’t mentionned a single time, so I started doing it myself.
Here is my config :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server {
            listen 80;
            server_name     symphoni.ca;
            root /path/to/my/htdocs;
            index index.php;
            location ~ \.php$ {
                    include /etc/nginx/fastcgi_params;
                    fastcgi_pass  127.0.0.1:1026;
                    fastcgi_index index.php;
            }
            location / {
                    try_files $uri $uri/ @laconica;
            }
            location @laconica {
                    rewrite ^(.+)$ /index.php?p=$1 last;
            }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This config was tested only on nginx &amp;gt; 0.7.30. It should work on &amp;gt;= 0.6.36 because it now has try_files support, but I haven’t 
tried it.&lt;/p&gt;

&lt;p&gt;I also suggest using laconica &amp;gt;= 0.7.3 because it fixes some bugs in the redirects. Also, this config works &lt;strong&gt;only&lt;/strong&gt; if you put 
the config
	$config[‘site’][‘fancy’] = true;
in the config.php. I couldn’t get the not fancy urls to work, but I guess this isn’t a problem :p.
If you need help just post a comment or contact me on identi.ca/symphoni.ca.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Configuring Nginx to do shared hosting or virtual hosts</title>
   <link href="http://pelletiermaxime.info/2009/03/14/Nginx-Shared-Hosts.html"/>
   <updated>2009-03-14T00:00:00-04:00</updated>
   <id>http://pelletiermaxime.info/2009/03/14/Nginx-Shared-Hosts</id>
   <content type="html">&lt;h1 id=&quot;configuring-nginx-to-do-shared-hosting-or-virtual-hosts&quot;&gt;Configuring Nginx to do shared hosting or virtual hosts&lt;/h1&gt;

&lt;p&gt;I host multiple websites on the same server and I was tired to do server sections in my nginx config,
so I created a config that catches all domains and point to a directory. Heres my config and I will
explain it after.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server {
            if ($host ~* www\.(.*)) {
                    set $host_without_www $1;
                    rewrite ^(.*)$ http://$host_without_www$1/ permanent;
            }
            server_name_in_redirect off; #or folders like /awstats will redirect to _
            listen 80;
            server_name _;
            access_log      /var/log/nginx/$host.access_log main;
            error_log      /var/log/nginx/$host.access_log info;
            root /var/www/$host/htdocs;
            location ~ \.php$ {
                    include /etc/nginx/fastcgi_params;
                    fastcgi_pass  127.0.0.1:1026;
                    fastcgi_index index.php;
            }
	#For WP
            if (!-e $request_filename) {
                    rewrite ^(.+)$ /index.php?q=$1 last;
            }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is a detailed explanation of the config, as best as I can describe it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if ($host ~* www\.(.*)) {
    	set $host_without_www $1;
            rewrite ^(.*)$ http://$host_without_www$1/ permanent;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Assign the variable host_without_www and then rewrite to stip all the www. Without those lines, www.domain.com and domain.com 
would be considered 2 different domains.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server_name_in_redirect off; #or folders like /awstats will redirect to _
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Like my comment says, without this line, domain.com/directory would redirect to _ (the server name).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;listen 80;
    server_name _;
    access_log      /var/log/nginx/$host.access_log main;
    error_log      /var/log/nginx/$host.access_log info;
    root /var/www/$host/htdocs;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The key part of this config is the server_name. _ is a catch all that catches every domain name. Then, the variable $host 
contain the actual domain name. For exemple, for this site the access log would be 
/var/log/nginx/pelletiermaxime.info.access_log. The root line tells nginx to use /var/www/pelletiermaxime.info/htdocs as the 
server root.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;location ~ \.php$ {
    	include /etc/nginx/fastcgi_params;
            fastcgi_pass  127.0.0.1:1026;
            fastcgi_index index.php;
    }
#For WP
    if (!-e $request_filename) {
    	rewrite ^(.+)$ /index.php?q=$1 last;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the standard config to pass requests to the php cgi and to rewrite urls for my wordpress blog. &lt;/p&gt;

&lt;p&gt;If you have questions or suggestions of how to do this better or comments, just ask.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Installing Redmine on Nginx</title>
   <link href="http://pelletiermaxime.info/2009/02/23/Redmine-On-Nginx.html"/>
   <updated>2009-02-23T00:00:00-05:00</updated>
   <id>http://pelletiermaxime.info/2009/02/23/Redmine-On-Nginx</id>
   <content type="html">&lt;h1 id=&quot;installing-redmine-on-nginx&quot;&gt;Installing Redmine on Nginx&lt;/h1&gt;

&lt;p&gt;At work we were looking for something to manage our projects, our bugs and that had a wiki, svn/git integration and some time 
tracking features. Trac what my first choice, but it needed lots of plugins to have the features we wanted. I then looked at 
&lt;a href=&quot;http://www.indefero.net/&quot;&gt;InDefero&lt;/a&gt;. This would have been perfect because it’s in php, but the project lacks a lot 
of features we wanted and just isn’t mature enough yet. Then I remembered Redmine. The only problem is that I had to learn how 
to install rails, mongrel and how to configure nginx to make it work. It took me hours and that’s why I wanted to blog about 
it.&lt;/p&gt;

&lt;p&gt;The first step is to get Redmine working using WEBrick. I’m using gentoo so installing rails was as simple as running emerge 
rails:2.1 (i’m using Redmine 0.8 which works only with rails 2.1.x). Then I followed the steps on the install wiki of redmine 
at &lt;a href=&quot;http://www.redmine.org/wiki/redmine/RedmineInstall&quot;&gt;http://www.redmine.org/wiki/redmine/RedmineInstall&lt;/a&gt;. One 
step I forgot at the beginning was making sure that my database is really set to UTF-8. Redmine seemed to work in ISO-8859-1, 
but I couldn’t import the data from our old Mantis installation until I set everything to UTF-8. After all this, Redmine worked 
perfectly at http://localhost:3000.&lt;/p&gt;

&lt;p&gt;Next is configuring mongrel and nginx. I’m sure setting up mongrel is different on every distro, but here are the commands I 
did on Gentoo :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- emerge mongrel_cluster
- mkdir /etc/mongrel_cluster
- ln -s /server/root/redmine/config/mongrel_cluster.yml /etc/mongrel_cluster/redmine.yml
- cp /usr/lib/ruby/gems/1.8/gems/mongrel_cluster-1.0.5/resources/mongrel_cluster /etc/init.d
- chmod +x /etc/init.d/mongrel_cluster
- modified /etc/mongrel_cluster/redmine.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, the hard part : configuring nginx. This took me hours to figure out. The problem is that redmine doesn’t like to be in a 
subdirectory. For exemple, http://trima.ca/redmine won’t work. What I learned just before writing this is that theres solutions 
around this problem :
- Starting mongrel with –prefix=/redmine
- Add this “ActionController::AbstractRequest.relative_url_root = “/redmine”” at the end of config/environment.rb
Keep in mind that I haven’t tried those solutions. What I ended up doing is using “redmine.trima.ca”. Here’s my nginx config :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;upstream mongrel {
	server 127.0.0.1:9000;
        server 127.0.0.1:9001;
}
server {
	listen          80;
        server_name     redmine.trima.ca;

    	root /path/to/root/redmine/public;

        location / {
    		proxy_set_header  X-Real-IP  $remote_addr;
            	proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header  Host $http_host;
    	        proxy_redirect false;
            	proxy_read_timeout 300;

                if (-f $request_filename/index.html) {
    	        	rewrite (.*) $1/index.html break;
            	}

                if (-f $request_filename.html) {
    	        	rewrite (.*) $1.html break;
            	}

                if (-f $request_filename.txt) {
    	        	rewrite (.*) $1.txt break;
            	}

                proxy_pass http://mongrel/;
        }
} I also had to add redmine.trima.ca to the dns, but that was really easy using the control panel of Linode. Hope that helped you.
&lt;/code&gt;&lt;/pre&gt;

</content>
 </entry>
 
 <entry>
   <title>My top groups/albums/songs</title>
   <link href="http://pelletiermaxime.info/2009/02/03/My-Favorite-Music.html"/>
   <updated>2009-02-03T00:00:00-05:00</updated>
   <id>http://pelletiermaxime.info/2009/02/03/My-Favorite-Music</id>
   <content type="html">&lt;h1 id=&quot;my-top-groupsalbumssongs&quot;&gt;My top groups/albums/songs&lt;/h1&gt;

&lt;p&gt;I wanted to do a post for a while listing my favorite albums/groups/songs and I say frequently on identica that a 
certain album or band is in my top 10. So here is my favorite music.&lt;/p&gt;

&lt;h2 id=&quot;top-groups&quot;&gt;Top Groups&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Ayreon&lt;/li&gt;
  &lt;li&gt;Sentenced&lt;/li&gt;
  &lt;li&gt;Dark Tranquility&lt;/li&gt;
  &lt;li&gt;Katatonia&lt;/li&gt;
  &lt;li&gt;Circus Maximus&lt;/li&gt;
  &lt;li&gt;Mono&lt;/li&gt;
  &lt;li&gt;Orphaned Land&lt;/li&gt;
  &lt;li&gt;Immortal&lt;/li&gt;
  &lt;li&gt;Alkaline Trio&lt;/li&gt;
  &lt;li&gt;Swallow The Sun&lt;/li&gt;
  &lt;li&gt;Mercenary&lt;/li&gt;
  &lt;li&gt;In Flames&lt;/li&gt;
  &lt;li&gt;Agalloch&lt;/li&gt;
  &lt;li&gt;Iron Maiden&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;top-albums&quot;&gt;Top Albums&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Ayreon - Human Equation&lt;/li&gt;
  &lt;li&gt;Ayreon - 01011001&lt;/li&gt;
  &lt;li&gt;Orphaned Land - Mabool&lt;/li&gt;
  &lt;li&gt;Circus Maximus - Isolate&lt;/li&gt;
  &lt;li&gt;Reverend Bizarre - 3: So Long Suckers&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;top-tracks&quot;&gt;Top Tracks&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Reverend Bizarre - 3: So Long Suckers - Anywhere Out Of This World&lt;/li&gt;
  &lt;li&gt;Mono - You Are There - Yearning&lt;/li&gt;
  &lt;li&gt;Giraffes? Giraffes! - More Skin With Milk-Mouth - I Am S/H(im)e[r] As You Am S/H(im)e[r] As You Are Me And We Am I And I Are All Our Together: Our Collective Consciousness Psychogenic Fugue&lt;/li&gt;
  &lt;li&gt;Equilibrium - Sagas - Mana&lt;/li&gt;
  &lt;li&gt;Live - Lightning Crashes&lt;/li&gt;
  &lt;li&gt;Radiohead - Creep&lt;/li&gt;
  &lt;li&gt;Ambeon - Cold Metal Single - Merry-Go-Round&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>Why I hate Ubuntu</title>
   <link href="http://pelletiermaxime.info/2008/12/30/Why-I-Hate-Ubuntu.html"/>
   <updated>2008-12-30T00:00:00-05:00</updated>
   <id>http://pelletiermaxime.info/2008/12/30/Why-I-Hate-Ubuntu</id>
   <content type="html">&lt;h1 id=&quot;why-i-hate-ubuntu&quot;&gt;Why I hate Ubuntu&lt;/h1&gt;

&lt;p&gt;I have been clear on &lt;a href=&quot;http://identi.ca/pelletiermaxime&quot;&gt;identi.ca&lt;/a&gt; that I’m using Gentoo and that I don’t like 
Ubuntu. After thinking about why I don’t like Ubuntu, I came to the conclusion that I &lt;em&gt;hate&lt;/em&gt; Ubuntu.
Many people asked me to explain why and why I use Gentoo. I won’t go into the details of why I love gentoo, because
I understand why it’s not a good distro for most users and it isn’t a good idea to try to persuade people to switch
from ubuntu. So, here’s a list of what I don’t like about Ubuntu.&lt;/p&gt;

&lt;h2 id=&quot;release-cycle&quot;&gt;Release cycle&lt;/h2&gt;
&lt;p&gt;My first point is about release cycle. As you know, Ubuntu has a new release each 6 months at a fixed date. This means that
they import new applications and packages at the beginning of that cycle and then spend the rest of the time testing
those packages and closing bugs. What this means is that by the time the release is announced, the distro is already old
in my opinion and the only updates for the next 6 months will be security updates. This also has the effect that a lot
of Ubuntu users reinstall each 6 months because they have troubles updating their system to the new release or just don’t
know how to update it while keeping all their settings.&lt;br /&gt;
What is more insulting is that Mark Shuttleworth is going in conferences (like he did at aKademy lat year) to ask developers to change their release cycle to match their own. He wants every Linux applications to do their new versions right before the development of new ubuntu begins to make it easier for him. Seriously, as a programmer I find this idea ridiculous. The vast majority of contributors to open source are people doing it in their free time and working on their favorite project when they want. That’s why they should release new versions when they feel that their code is stable enough, not when they are forced to. &lt;/p&gt;

&lt;h2 id=&quot;package-management--repositories&quot;&gt;Package management / Repositories&lt;/h2&gt;
&lt;p&gt;First of all, I have nothing against apt and I really don’t care about graphical interfaces around it. What I don’t like about Ubuntu is that there is no choice. Of course I understand that it’s a binary distro, so the one doing the packages is the one that chooses what option he wants to use to build the software, but that’s not a reason to have no options. If I want to install phpmyadmin, maybe I don’t want apache with it. Or maybe I want to have sse/sse2/ssse3 on my ffmpeg and x264 packages. I know that people will reply to me that there’s repositories for this, but that’s exactly my point. Why should I trust external repository that are most of the time untested ? Same for “packages that can’t be included for legal reasons”. Why do I have to add something like Medibuntu or enable restricted extras repositories ? As far as I know, the first goal of Ubuntu is to be user friendly. Having to look everywhere in forums and wikis to find instructions on how to get mp3 playback isn’t user friendly for me. That’s why there is tons of “forks” of ubuntu like Linux Mint that aim to be a complete distro out of the box and even provide their own packages. Another thing I hate is when they rename packages or put non friendly names. How are you supposed to know that fglrx is in fact ati video cards drivers ? Why do they rename drivers like xf86-video-via to something like xserver-xorg-video-via instead of keeping the official name over at X.org ?&lt;/p&gt;

&lt;h2 id=&quot;contributions-or-the-lack-of&quot;&gt;Contributions (or the lack of)&lt;/h2&gt;
&lt;p&gt;No matter what some of the ubuntu guys say, Ubuntu is &lt;em&gt;not&lt;/em&gt; contributing back to upstream. First of all, a big part of their packages are coming from Debian and they don’t really contribute back. You can say that all debian contributors also contribute tu Ubuntu, but the contrary is not true at all.
Then there is patches. I can’t think of the number of times I have heard developers saying they learned a patch was in ubuntu and that they have never seen it before. Same for backports. Distros that decide to for exemple backport patches from kde 4.2 in kde 4.1 really are screwing the developers. They get bug reports by user using those unsupported versions and they can’t do anything about it because they can’t know if the problem is in 4.1 or 4.2. Ubuntu supporters are saying that the patchs are all on a big website, but you can’t expect every developers to go to each distributions and see their patch. No patch should be used without being posted to upstream’s bug tracker and kwowing that the patch is doing the right thing.&lt;br /&gt;
My biggest gripe is that Canonical isn’t supporting the kernel or any software really. While Redhat/Novell/IBM/Intel and even Orable contributes massively to the kernel, Ubuntu has not a single full time paid developer working on it as far as I know. I’m pretty sure that they have some developers working on Gnome and 1 on KDE, but that’s not enough.&lt;br /&gt;
Same thing on their bug tracker. First of all, their bug tracker is proprietary, so of course that’s a major reason for not liking it. But my main complaint is that they are taking the habit of not posting the bugs to upstream’s bug tracker, but instead are trying to fix the bug on their own. Also sometimes bugs are turning into a forum about how to fix the problem and finally nothing is being done.&lt;/p&gt;

&lt;h2 id=&quot;flavors&quot;&gt;“Flavors”&lt;/h2&gt;

&lt;p&gt;They chose Gnome as their main desktop environment and even modeled their release cycle on gnome. Their typically release 1 month after a new Gnome release. The problem with that is that kde, xfce, fluxbox, openbox and all other “flavors” have to follow this same cycle and have to release at the same date. This results in a Kubuntu and Xubuntu that are way behind the “main” distribution.&lt;/p&gt;

&lt;h2 id=&quot;community&quot;&gt;Community&lt;/h2&gt;

&lt;p&gt;Seriously, this is a mess. I was trying to find information for this article, I and got lost in the wiki, docs and forums, without ever finding what I wanted. In fact, it was detecting my language as french and I couldn’t find a way to put it in english and the french docs are of course way behing because they are in a big part only a translation of the english docs.&lt;br /&gt;
Normally I prefer forums because the best users and fans are all there, but the experiences I had in the few months I visited them were really bad. I remember people asking very simple questions like : “What’s the apt command to search a package ?”. A few hours later, there was something like 25 answers and only the good answer was the 23th. All the other were saying to use the graphical interface or talking about aptitude and other offtopic rambling. I have other exemples that just prove that people reading the forums most of the time don’t know what they talk about. At the point that even when I was still using ubuntu, I was visiting the Gentoo forums, which are probably the best linux forums in my opinion because you can be sure that people answering there know their stuff.&lt;/p&gt;

&lt;p&gt;In conclusion, i’m sure you can apply most of those points to the majority of distributions. The majority of distros use binary packages and have a fixed release cycle. But their are few distros that in my opinion don’t have those issues. Opensuse has a cycle of about 8 months, but they are not afraid to change it if something is wrong. They also support all desktop environments equally and include almost all of them in their dvd. Distributions like Arch and Foresight (based on rpath) manage to be very stable while still have constant new packages and be &lt;a href=&quot;http://en.wikipedia.org/wiki/Rolling_release&quot;&gt;rolling release distributions&lt;/a&gt;. Arch also allow you to customize your packages easily without having to build something from sources with no help. I won’t bore you by talking about Gentoo, but of course Gentoo is the ultimate tweaker distribution.&lt;br /&gt;
The main point of this is just to say that I wish the distribution that most of the people new to Linux would be better than this. There must be a way to have a distribution that can be good for the new users (live cd, great installer and graphical package manager and great control panels) while still having the choice of using “unstable” packages, more customization and more teamwork with the application developers and the linux kernel team.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Trying Jekyll</title>
   <link href="http://pelletiermaxime.info/2008/12/27/Trying-Jekyll.html"/>
   <updated>2008-12-27T00:00:00-05:00</updated>
   <id>http://pelletiermaxime.info/2008/12/27/Trying-Jekyll</id>
   <content type="html">&lt;h1 id=&quot;trying-jekyll&quot;&gt;Trying Jekyll&lt;/h1&gt;

&lt;p&gt;Trying jekyll to see if it could be a solution to my blogging problems =).&lt;/p&gt;
</content>
 </entry>
 

</feed>
